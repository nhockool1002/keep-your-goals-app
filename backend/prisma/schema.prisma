// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  username         String?  @unique
  email            String   @unique
  passwordHash     String?
  themePreference  String   @default("light") @map("theme_preference")
  subscriptionId   String?  @map("subscription_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  authProviders    UserAuthProvider[]
  subscriptions    UserSubscription[]
  goals            Goal[]
  settings         Settings[]
}

model UserAuthProvider {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @map("user_id")
  provider       String
  providerId     String   @map("provider_id")
  providerEmail  String?  @map("provider_email")
  accessToken    String   @map("access_token")
  refreshToken   String?  @map("refresh_token")
  expiresAt      DateTime @map("expires_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  @@index([provider, providerId], name: "idx_user_auth_provider")
}

model Subscription {
  id           String   @id @default(uuid())
  name         String
  maxGoals     Int?     @map("max_goals")
  price        Float
  durationDays Int      @map("duration_days")
  createdAt    DateTime @default(now()) @map("created_at")
  userSubscriptions UserSubscription[]
}

model UserSubscription {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @map("user_id")
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String   @map("subscription_id")
  startDate      DateTime @default(now()) @map("start_date")
  endDate        DateTime @map("end_date")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
}

model Goal {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  type        String
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  status      String
  quantity    Int?
  amount      Float?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  goalHistory GoalHistory[]
  statistics  GoalStatistics[]
  labels      GoalLabel[]
  @@index([userId], name: "idx_goals_user_id")
  @@index([status], name: "idx_goals_status")
}

model GoalLabel {
  id          String   @id @default(uuid())
  name        String   @unique
  goals       Goal[]   @relation()
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
}

model GoalHistory {
  id          String   @id @default(uuid())
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId      String   @map("goal_id")
  status      String
  updatedAt   DateTime @default(now()) @map("updated_at")
}

model GoalStatistics {
  id          String   @id @default(uuid())
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId      String   @map("goal_id")
  progress    Float
  updatedAt   DateTime @default(now()) @map("updated_at")
}

model Settings {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  key         String
  value       String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
}

