generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(uuid())
  username        String?            @unique
  email           String             @unique
  passwordHash    String?
  themePreference String             @default("light") @map("theme_preference")
  subscriptionId  String?            @map("subscription_id")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @default(now()) @map("updated_at")
  isAdmin         Boolean            @default(false)
  goals           Goal[]
  settings        Settings[]
  authProviders   UserAuthProvider[]
  subscriptions   UserSubscription[]
}

model UserAuthProvider {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  provider      String
  providerId    String   @map("provider_id")
  providerEmail String?  @map("provider_email")
  accessToken   String   @map("access_token")
  refreshToken  String?  @map("refresh_token")
  expiresAt     DateTime @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([provider, providerId], map: "idx_user_auth_provider")
}

model Subscription {
  id                String             @id @default(uuid())
  name              String
  maxGoals          Int?               @map("max_goals")
  price             Float
  durationDays      Int                @map("duration_days")
  createdAt         DateTime           @default(now()) @map("created_at")
  userSubscriptions UserSubscription[]
}

model UserSubscription {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  subscriptionId String       @map("subscription_id")
  startDate      DateTime     @default(now()) @map("start_date")
  endDate        DateTime     @map("end_date")
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String           @id @default(uuid())
  userId      String           @map("user_id")
  type        GoalType
  title       String
  description String?
  startDate   DateTime         @map("start_date")
  endDate     DateTime         @map("end_date")
  status      GoalStatus
  quantity    Int?
  amount      Float?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @map("updated_at")
  current     Float?           @default(0.0)
  atmm        Float?           @default(0.0)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalHistory GoalHistory[]
  statistics  GoalStatistics[]
  labels      GoalLabel[]      @relation("GoalToGoalLabel")

  @@index([userId], map: "idx_goals_user_id")
  @@index([status], map: "idx_goals_status")
}

model GoalLabel {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  goals     Goal[]   @relation("GoalToGoalLabel")
}

model GoalHistory {
  id        String   @id @default(uuid())
  goalId    String   @map("goal_id")
  status    String
  note      String?  @default("")
  updatedAt DateTime @default(now()) @map("updated_at")
  goal      Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model GoalStatistics {
  id        String   @id @default(uuid())
  goalId    String   @map("goal_id")
  progress  Float
  updatedAt DateTime @default(now()) @map("updated_at")
  goal      Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model Settings {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  key       String
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum GoalType {
  TODOANYTHING
  TODOQUANTITY
  SAVEMONEY
}

enum GoalStatus {
  TODO
  IN_PROGRESS
  DONE
}
